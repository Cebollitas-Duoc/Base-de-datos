-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2022-09-10 16:44:56 CLST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE categoriamantencion (
    id_categoriamantencion NUMBER NOT NULL,
    descripcion            VARCHAR2(100)
);

ALTER TABLE categoriamantencion ADD CONSTRAINT categoriamantencion_pk PRIMARY KEY ( id_categoriamantencion );

CREATE TABLE categoriareporte (
    id_categoria NUMBER NOT NULL,
    nombre       VARCHAR2(50)
);

ALTER TABLE categoriareporte ADD CONSTRAINT categoriareporte_pk PRIMARY KEY ( id_categoria );

CREATE TABLE categoriaservicio (
    id_categoriaservicio NUMBER NOT NULL,
    descripcion          VARCHAR2(100)
);

ALTER TABLE categoriaservicio ADD CONSTRAINT categoriaservicio_pk PRIMARY KEY ( id_categoriaservicio );

CREATE TABLE categoriaservicioextra (
    id_servicioextra NUMBER NOT NULL,
    nombre           VARCHAR2(50),
    descripcion      VARCHAR2(100)
);

ALTER TABLE categoriaservicioextra ADD CONSTRAINT servicioextra_pk PRIMARY KEY ( id_servicioextra );

CREATE TABLE chofer (
    id_chofer       NUMBER NOT NULL,
    nombres         VARCHAR2(50),
    apellidos       VARCHAR2(50),
    patentevehiculo VARCHAR2(50)
);

ALTER TABLE chofer ADD CONSTRAINT chofer_pk PRIMARY KEY ( id_chofer );

CREATE TABLE cliente (
    id_usuario      NUMBER NOT NULL,
    primernombre    VARCHAR2(50),
    segundonombre   VARCHAR2(50),
    primerapellido  VARCHAR2(50),
    segundoapellido VARCHAR2(50),
    direccion       VARCHAR2(50),
    telefono        VARCHAR2(25),
    foto            VARCHAR2(200)
);

ALTER TABLE cliente ADD CONSTRAINT cliente_pk PRIMARY KEY ( id_usuario );

CREATE TABLE conector_departamento_servicio (
    id_servicio     NUMBER NOT NULL,
    id_departamento NUMBER NOT NULL,
    cantidad        NUMBER,
    estado          CHAR(1)
);

--  ERROR: PK name length exceeds maximum allowed length(30) 
ALTER TABLE conector_departamento_servicio ADD CONSTRAINT conector_departamento_servicio_pk PRIMARY KEY ( id_servicio,
                                                                                                          id_departamento );

--  ERROR: Table name length exceeds maximum allowed length(30) 
CREATE TABLE conector_departamento_servicioextra (
    id_departamento    NUMBER NOT NULL,
    id_servicioextra   NUMBER NOT NULL,
    valor              NUMBER,
    estado             CHAR(1),
    id_servicioextra_1 NUMBER NOT NULL,
    id_chofer          NUMBER NOT NULL
);

--  ERROR: PK name length exceeds maximum allowed length(30) 
ALTER TABLE conector_departamento_servicioextra ADD CONSTRAINT conector_departamento_servicioextra_pk PRIMARY KEY ( id_servicioextra_1
);

CREATE TABLE conector_servicioextra_reserva (
    id_reserva         NUMBER NOT NULL,
    id_departamento    NUMBER NOT NULL,
    id_servicioextra   NUMBER NOT NULL,
    id_servicioextra_1 NUMBER NOT NULL
);

--  ERROR: PK name length exceeds maximum allowed length(30) 
ALTER TABLE conector_servicioextra_reserva
    ADD CONSTRAINT conector_servicioextra_reserva_pk PRIMARY KEY ( id_reserva,
                                                                   id_departamento,
                                                                   id_servicioextra );

CREATE TABLE departamento (
    id_departamento NUMBER NOT NULL,
    direccion       VARCHAR2(50),
    longitud        NUMBER(8),
    latitud         NUMBER(8),
    habitaciones    NUMBER,
    banios          NUMBER,
    tamanio         NUMBER(2),
    valor           NUMBER(2)
);

ALTER TABLE departamento ADD CONSTRAINT departamento_pk PRIMARY KEY ( id_departamento );

CREATE TABLE error (
    id_error    NUMBER NOT NULL,
    nombreerror VARCHAR2(50),
    descripcion VARCHAR2(200),
    fechahora   NUMBER(25),
    zona        VARCHAR2(50)
);

ALTER TABLE error ADD CONSTRAINT error_pk PRIMARY KEY ( id_error );

CREATE TABLE estadopago (
    id_estadopago NUMBER NOT NULL,
    nombre        VARCHAR2(50),
    descripcion   VARCHAR2(200)
);

ALTER TABLE estadopago ADD CONSTRAINT estadopago_pk PRIMARY KEY ( id_estadopago );

CREATE TABLE estadoreserva (
    id_estadoreserva NUMBER NOT NULL,
    nombre           VARCHAR2(50),
    descripcion      VARCHAR2(200)
);

ALTER TABLE estadoreserva ADD CONSTRAINT estadoreserva_pk PRIMARY KEY ( id_estadoreserva );

CREATE TABLE estadousuario (
    id_estadousuario NUMBER NOT NULL,
    descripcion      VARCHAR2(50)
);

ALTER TABLE estadousuario ADD CONSTRAINT estadousuario_pk PRIMARY KEY ( id_estadousuario );

CREATE TABLE foto (
    id_foto         NUMBER NOT NULL,
    id_departamento NUMBER NOT NULL,
    nombre          VARCHAR2(50)
);

ALTER TABLE foto ADD CONSTRAINT foto_pk PRIMARY KEY ( id_foto );

CREATE TABLE iventario (
    id_inventario   NUMBER NOT NULL,
    nombre          VARCHAR2(50),
    cantidad        NUMBER,
    id_departamento NUMBER NOT NULL
);

ALTER TABLE iventario ADD CONSTRAINT iventario_pk PRIMARY KEY ( id_inventario );

CREATE TABLE mantencion (
    id_mantencion          NUMBER NOT NULL,
    id_categoriamantencion NUMBER NOT NULL,
    id_departamento        NUMBER NOT NULL,
    descripcion            VARCHAR2(200),
    valor                  NUMBER(2),
    fechainicio            NUMBER(25),
    fechafin               NUMBER(25)
);

ALTER TABLE mantencion ADD CONSTRAINT mantencion_pk PRIMARY KEY ( id_mantencion );

CREATE TABLE pago (
    id_pago       NUMBER NOT NULL,
    id_estadopago NUMBER NOT NULL,
    valor         NUMBER(2),
    fecha         NUMBER(25)
);

ALTER TABLE pago ADD CONSTRAINT pago_pk PRIMARY KEY ( id_pago );

CREATE TABLE permiso (
    id_permiso  NUMBER NOT NULL,
    nombre      VARCHAR2(4000),
    descripcion VARCHAR2(4000)
);

ALTER TABLE permiso ADD CONSTRAINT permiso_pk PRIMARY KEY ( id_permiso );

CREATE TABLE reporte (
    id_reporte   NUMBER NOT NULL,
    nombre       VARCHAR2(50),
    id_categoria NUMBER NOT NULL
);

ALTER TABLE reporte ADD CONSTRAINT reporte_pk PRIMARY KEY ( id_reporte );

CREATE TABLE reserva (
    id_reserva       NUMBER NOT NULL,
    id_usuario       NUMBER NOT NULL,
    id_departamento  NUMBER NOT NULL,
    id_estadoreserva NUMBER NOT NULL,
    fechadesde       NUMBER(25),
    fechahasta       NUMBER(25),
    valortotal       NUMBER,
    id_pago          NUMBER NOT NULL
);

ALTER TABLE reserva ADD CONSTRAINT reserva_pk PRIMARY KEY ( id_reserva );

CREATE TABLE servicio (
    id_servicio          NUMBER NOT NULL,
    descripcion          VARCHAR2(100),
    id_categoriaservicio NUMBER NOT NULL
);

ALTER TABLE servicio ADD CONSTRAINT servicio_pk PRIMARY KEY ( id_servicio );

CREATE TABLE sesion (
    id_sesion     NUMBER NOT NULL,
    llave         VARCHAR2(64),
    expiracion    NUMBER(25),
    id_usuario    NUMBER NOT NULL,
    fechacreacion NUMBER(25)
);

ALTER TABLE sesion ADD CONSTRAINT sesion_pk PRIMARY KEY ( id_sesion );

CREATE TABLE usuario (
    id_usuario       NUMBER NOT NULL,
    password         VARCHAR2(80),
    id_permiso       NUMBER NOT NULL,
    id_estadousuario NUMBER NOT NULL,
    email            VARCHAR2(50)
);

ALTER TABLE usuario ADD CONSTRAINT usuario_pk PRIMARY KEY ( id_usuario );

ALTER TABLE cliente
    ADD CONSTRAINT cliente_usuario_fk FOREIGN KEY ( id_usuario )
        REFERENCES usuario ( id_usuario );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE conector_departamento_servicio
    ADD CONSTRAINT conector_departamento_servicio_departamento_fk FOREIGN KEY ( id_departamento )
        REFERENCES departamento ( id_departamento );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE conector_departamento_servicio
    ADD CONSTRAINT conector_departamento_servicio_servicio_fk FOREIGN KEY ( id_servicio )
        REFERENCES servicio ( id_servicio );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE conector_departamento_servicioextra
    ADD CONSTRAINT conector_departamento_servicioextra_chofer_fk FOREIGN KEY ( id_chofer )
        REFERENCES chofer ( id_chofer );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE conector_departamento_servicioextra
    ADD CONSTRAINT conector_departamento_servicioextra_departamento_fk FOREIGN KEY ( id_departamento )
        REFERENCES departamento ( id_departamento );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE conector_departamento_servicioextra
    ADD CONSTRAINT conector_departamento_servicioextra_servicioextra_fk FOREIGN KEY ( id_servicioextra )
        REFERENCES categoriaservicioextra ( id_servicioextra );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE conector_servicioextra_reserva
    ADD CONSTRAINT conector_servicioextra_reserva_conector_departamento_servicioextra_fk FOREIGN KEY ( id_servicioextra_1 )
        REFERENCES conector_departamento_servicioextra ( id_servicioextra_1 );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE conector_servicioextra_reserva
    ADD CONSTRAINT conector_servicioextra_reserva_reserva_fk FOREIGN KEY ( id_reserva )
        REFERENCES reserva ( id_reserva );

ALTER TABLE foto
    ADD CONSTRAINT foto_departamento_fk FOREIGN KEY ( id_departamento )
        REFERENCES departamento ( id_departamento );

ALTER TABLE iventario
    ADD CONSTRAINT iventario_departamento_fk FOREIGN KEY ( id_departamento )
        REFERENCES departamento ( id_departamento );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE mantencion
    ADD CONSTRAINT mantencion_categoriamantencion_fk FOREIGN KEY ( id_categoriamantencion )
        REFERENCES categoriamantencion ( id_categoriamantencion );

ALTER TABLE mantencion
    ADD CONSTRAINT mantencion_departamento_fk FOREIGN KEY ( id_departamento )
        REFERENCES departamento ( id_departamento );

ALTER TABLE pago
    ADD CONSTRAINT pago_estadopago_fk FOREIGN KEY ( id_estadopago )
        REFERENCES estadopago ( id_estadopago );

ALTER TABLE reporte
    ADD CONSTRAINT reporte_categoriareporte_fk FOREIGN KEY ( id_categoria )
        REFERENCES categoriareporte ( id_categoria );

ALTER TABLE reserva
    ADD CONSTRAINT reserva_cliente_fk FOREIGN KEY ( id_usuario )
        REFERENCES cliente ( id_usuario );

ALTER TABLE reserva
    ADD CONSTRAINT reserva_departamento_fk FOREIGN KEY ( id_departamento )
        REFERENCES departamento ( id_departamento );

ALTER TABLE reserva
    ADD CONSTRAINT reserva_estadoreserva_fk FOREIGN KEY ( id_estadoreserva )
        REFERENCES estadoreserva ( id_estadoreserva );

ALTER TABLE reserva
    ADD CONSTRAINT reserva_pago_fk FOREIGN KEY ( id_pago )
        REFERENCES pago ( id_pago );

ALTER TABLE servicio
    ADD CONSTRAINT servicio_categoriaservicio_fk FOREIGN KEY ( id_categoriaservicio )
        REFERENCES categoriaservicio ( id_categoriaservicio );

ALTER TABLE sesion
    ADD CONSTRAINT sesion_usuario_fk FOREIGN KEY ( id_usuario )
        REFERENCES usuario ( id_usuario );

ALTER TABLE usuario
    ADD CONSTRAINT usuario_estadousuario_fk FOREIGN KEY ( id_estadousuario )
        REFERENCES estadousuario ( id_estadousuario );

ALTER TABLE usuario
    ADD CONSTRAINT usuario_permiso_fk FOREIGN KEY ( id_permiso )
        REFERENCES permiso ( id_permiso );

CREATE SEQUENCE categoriaservicioextra_id_serv START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER categoriaservicioextra_id_serv BEFORE
    INSERT ON categoriaservicioextra
    FOR EACH ROW
    WHEN ( new.id_servicioextra IS NULL )
BEGIN
    :new.id_servicioextra := categoriaservicioextra_id_serv.nextval;
END;
/

CREATE SEQUENCE cliente_id_usuario_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cliente_id_usuario_trg BEFORE
    INSERT ON cliente
    FOR EACH ROW
    WHEN ( new.id_usuario IS NULL )
BEGIN
    :new.id_usuario := cliente_id_usuario_seq.nextval;
END;
/

CREATE SEQUENCE departamento_id_departamento START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER departamento_id_departamento BEFORE
    INSERT ON departamento
    FOR EACH ROW
    WHEN ( new.id_departamento IS NULL )
BEGIN
    :new.id_departamento := departamento_id_departamento.nextval;
END;
/

CREATE SEQUENCE error_id_error_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER error_id_error_trg BEFORE
    INSERT ON error
    FOR EACH ROW
    WHEN ( new.id_error IS NULL )
BEGIN
    :new.id_error := error_id_error_seq.nextval;
END;
/

CREATE SEQUENCE foto_id_foto_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER foto_id_foto_trg BEFORE
    INSERT ON foto
    FOR EACH ROW
    WHEN ( new.id_foto IS NULL )
BEGIN
    :new.id_foto := foto_id_foto_seq.nextval;
END;
/

CREATE SEQUENCE iventario_id_inventario_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER iventario_id_inventario_trg BEFORE
    INSERT ON iventario
    FOR EACH ROW
    WHEN ( new.id_inventario IS NULL )
BEGIN
    :new.id_inventario := iventario_id_inventario_seq.nextval;
END;
/

CREATE SEQUENCE mantencion_id_mantencion_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER mantencion_id_mantencion_trg BEFORE
    INSERT ON mantencion
    FOR EACH ROW
    WHEN ( new.id_mantencion IS NULL )
BEGIN
    :new.id_mantencion := mantencion_id_mantencion_seq.nextval;
END;
/

CREATE SEQUENCE pago_id_pago_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pago_id_pago_trg BEFORE
    INSERT ON pago
    FOR EACH ROW
    WHEN ( new.id_pago IS NULL )
BEGIN
    :new.id_pago := pago_id_pago_seq.nextval;
END;
/

CREATE SEQUENCE reporte_id_reporte_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER reporte_id_reporte_trg BEFORE
    INSERT ON reporte
    FOR EACH ROW
    WHEN ( new.id_reporte IS NULL )
BEGIN
    :new.id_reporte := reporte_id_reporte_seq.nextval;
END;
/

CREATE SEQUENCE reserva_id_reserva_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER reserva_id_reserva_trg BEFORE
    INSERT ON reserva
    FOR EACH ROW
    WHEN ( new.id_reserva IS NULL )
BEGIN
    :new.id_reserva := reserva_id_reserva_seq.nextval;
END;
/

CREATE SEQUENCE servicio_id_servicio_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER servicio_id_servicio_trg BEFORE
    INSERT ON servicio
    FOR EACH ROW
    WHEN ( new.id_servicio IS NULL )
BEGIN
    :new.id_servicio := servicio_id_servicio_seq.nextval;
END;
/

CREATE SEQUENCE sesion_id_sesion_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER sesion_id_sesion_trg BEFORE
    INSERT ON sesion
    FOR EACH ROW
    WHEN ( new.id_sesion IS NULL )
BEGIN
    :new.id_sesion := sesion_id_sesion_seq.nextval;
END;
/

CREATE SEQUENCE usuario_id_usuario_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER usuario_id_usuario_trg BEFORE
    INSERT ON usuario
    FOR EACH ROW
    WHEN ( new.id_usuario IS NULL )
BEGIN
    :new.id_usuario := usuario_id_usuario_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            24
-- CREATE INDEX                             0
-- ALTER TABLE                             46
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          13
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         13
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                  12
-- WARNINGS                                 0
